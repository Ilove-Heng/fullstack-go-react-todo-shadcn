// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todos.sql

package sqlc

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    body,
    completed
) VALUES (
    $1, $2
) RETURNING id, body, completed, created_at, updated_at
`

type CreateTodoParams struct {
	Body      string `json:"body"`
	Completed bool   `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.createTodoStmt, createTodo, arg.Body, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteTodoStmt, deleteTodo, id)
	return err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, body, completed, created_at, updated_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id int32) (Todo, error) {
	row := q.queryRow(ctx, q.getTodoByIDStmt, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, body, completed, created_at, updated_at FROM todos
ORDER BY created_at DESC
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.query(ctx, q.getTodosStmt, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoCompletion = `-- name: UpdateTodoCompletion :one
UPDATE todos
SET completed = true
WHERE id = $1
RETURNING id, body, completed, created_at, updated_at
`

func (q *Queries) UpdateTodoCompletion(ctx context.Context, id int32) (Todo, error) {
	row := q.queryRow(ctx, q.updateTodoCompletionStmt, updateTodoCompletion, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
