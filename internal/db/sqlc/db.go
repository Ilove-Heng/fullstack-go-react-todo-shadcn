// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTodoStmt, err = db.PrepareContext(ctx, createTodo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTodo: %w", err)
	}
	if q.deleteTodoStmt, err = db.PrepareContext(ctx, deleteTodo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTodo: %w", err)
	}
	if q.getTodoByIDStmt, err = db.PrepareContext(ctx, getTodoByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodoByID: %w", err)
	}
	if q.getTodosStmt, err = db.PrepareContext(ctx, getTodos); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodos: %w", err)
	}
	if q.updateTodoCompletionStmt, err = db.PrepareContext(ctx, updateTodoCompletion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTodoCompletion: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTodoStmt != nil {
		if cerr := q.createTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTodoStmt: %w", cerr)
		}
	}
	if q.deleteTodoStmt != nil {
		if cerr := q.deleteTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTodoStmt: %w", cerr)
		}
	}
	if q.getTodoByIDStmt != nil {
		if cerr := q.getTodoByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodoByIDStmt: %w", cerr)
		}
	}
	if q.getTodosStmt != nil {
		if cerr := q.getTodosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosStmt: %w", cerr)
		}
	}
	if q.updateTodoCompletionStmt != nil {
		if cerr := q.updateTodoCompletionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTodoCompletionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createTodoStmt           *sql.Stmt
	deleteTodoStmt           *sql.Stmt
	getTodoByIDStmt          *sql.Stmt
	getTodosStmt             *sql.Stmt
	updateTodoCompletionStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createTodoStmt:           q.createTodoStmt,
		deleteTodoStmt:           q.deleteTodoStmt,
		getTodoByIDStmt:          q.getTodoByIDStmt,
		getTodosStmt:             q.getTodosStmt,
		updateTodoCompletionStmt: q.updateTodoCompletionStmt,
	}
}
